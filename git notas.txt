si arriba en el repo de origin crea otra persona una branch nueva y tu le quieres hacer seguimiento 
localmente entonces se debe usar estos comandos:

	git fetch origin
	git branch --track newLocalBranch remoteName/remoteBranch

o tambien:

	git checkout -b newLocalBranch origin/remoteBranch
(esta crea la rama local nueva y de una vez te cambia a esa rama)

o tambien:

si el nomre de la rama remota es exacto y si no tenemos otra que se llame igual localmente
podemos de una vez cambiarnos a esta rama nueva con:

	git checkout newlocalBranch

asi tendremos una copia de la rama de arriba aca localmente. 

luego de tenerla local se puede integrar a master local con un merge o un rebase.

si hay cambios en el repositorio de origen y quieres subir los cambios que hicistes localmente
no se va a poder al menos que primeros bajes del repositorio origen (el trabajo que otro adelanto)
con git fetch origin
y luego lo integres a tu trabajo con git merge desde la rama en cuestion, (normalmente la master)

  	git merge 

o tambien se puede bajar lo que haya sido actualizado arriba con un 

  	git checkout master
  	git pull --rebase origin

se trae lo que este nuevo en el repositorio origen (que otros han hecho) y le monta lo que tu actualmente editaste localmente
y no se crea un merge commit sino otro commit en la misma linea de flujo, este nuevo commit no tiene 
2 padres sino uno solo, se ve la linea de flujo mas limpia a que si se hace el merge commit con git merge.

luego de hacer rebase y/o commit se procede a subir todo al repo origin con un git push.

para borrar un branch remota (en origin)
 	git push origin --delete branchName

pra borrarla localmente es 

 	git branch -D branchName

es importante usar el comando
 	git fetch origin
ya que este actualiza nuestro repositorio local con respecto al origin repository

para crear una branch nueva localmente y luego reflejarla en rel repositorio origin:

 	git branch nombreBranch
 	git push origin nombreBranch

para cambiarle el nombre a un branch debes pararte en la rama y colocar:
 	git branch -m newName

 
para que una rama local apunte a otra rama remota (suponiendo que quieras hacerle tracking a otra rama arriba)
pararse en la rama local y poner:
 
 	$ git branch -u origin/ramaremota
 
con este comando se puede ver cuales ramas locales estan haciendo tracking a cuales remotas:
 	
 	git branch -vv

para ver el history de los commits de una manera compacta y resumida:
 	git log --oneline

	 git log --oneline
cc8d98f actualizado notas git
5fa3923 notas de git agregadas
7ba8d3a notas git agregadas al directorio
dc261e9 resulto
a33f486 merge
f908859 Update hhh.html
8849ac5 rebase2
f61b2fd Update hhh.html
d927a1b Update hhh.html
2dce33a Update hhh.html
f32be4f uno
7ae3bf2 ya

con el comando git checkout xxyyzz (commit sha o numer) podemos pararnos especificamente en como lucia el directorio 
en un momento de la historia dada. en el ejemplo podemos ver como lucia el directorio para cuando hicimos el snapshot f32be4f
esto nos coloca n un detach HEAD ya que no estamos en la cabeza de la rama sino que echamos hacia atras
jmellado@mbo-hi-04 MINGW64 /c/mypro (master)
$ git checkout f32be4f
Note: checking out 'f32be4f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.


HEAD is now at f32be4f... uno

jmellado@mbo-hi-04 MINGW64 /c/mypro ((f32be4f...))
$ git checkout 2dce33a
Previous HEAD position was f32be4f... uno
HEAD is now at 2dce33a... Update hhh.html


